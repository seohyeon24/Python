# 리스트와 반복문
# list: 여러가지 자료를 저장할 수 있는 자료(문자, 수식 등이 개별적인, 독립적인 모든 자료를 모아서 사용할 수 있도로 해주는 특별한 형태)
# [요소, 요소, 요소 ...] 요소=element
# [인덱스]
list_a = [273, 32, 103, "문자열", True, False]
list_a[0] #273

## list 특정 요소 변경
list_a[0] = '변경'
print(list_a) #['변경', 32, 103, '문자열', True, False]

## 대괄호 안에 음수를 넣어 뒤에서부터 요소를 선택할 수 있다.
list_a = [273, 32, 103, "문자열", True, False]
print(list_a[-1]) #False

## 리스트 접근 연산자를 다음과 같이 이중으로 사용할 수 있다.
print(list_a[3]) #문자열
print(list_a[3][0]) #문

## 리스트 안에 리스트를 사용할 수도 있다.
list_a = [[1,2,3], [3,4,5],[5,6,7]]
print(list_a[1])
print(list_a[1][1])
# [3, 4, 5]
# 4

# 리스트 연산자: 연결(+), 반복(*), len()

# 리스트를 선언합니다.
list_a =[1,2,3]
list_b =[4,5,6]

# 출력합니다.
print("#리스트")
print("list_a", list_a)
print("list_b=",list_b)
print()

# 기본연산자
print("# 리스트 기본 연산자")
print("list_a + list_b", list_a+list_b)
print("list_a*3", list_a*3)
print()

# 함수
print("# 길이 구하기")
print("len(list_a)=", len(list_a))

# #리스트
# list_a [1, 2, 3]
# list_b= [4, 5, 6]
#
# # 리스트 기본 연산자
# list_a + list_b [1, 2, 3, 4, 5, 6]
# list_a*3 [1, 2, 3, 1, 2, 3, 1, 2, 3]
#
# # 길이 구하기
# len(list_a)= 3

## 리스트에 요소 추가하기: append, insert
# append(): 리스트명.append(요소)
# insert(): 리스트명.insert(위치, 요소)

# 리스트에 요소 추가하기
# 리스트를 선언합니다.
list_a=[1,2,3]

#리스트 뒤에 요소 추가하기
print("#리스트 뒤에 요소 추가하기")
list_a.append(4)
list_a.append(5)
print(list_a)
print()

# 리스트 중간에 요소 추가하기
print("# 리스트 중간에 요소 추가하기")
list_a.insert(0,10) #list_a.insert(0,10) 0:삽입할 위치, 10: 삽입할 값
print(list_a)

# #리스트 뒤에 요소 추가하기
# [1, 2, 3, 4, 5]
#
# # 리스트 중간에 요소 추가하기
# [10, 1, 2, 3, 4, 5]

## 한 번에 여러 요소를 추가하고 싶을 때: extend()
list_a = [1,2,3]
list_a.extend([4,5,6])
print(list_a)

# [1, 2, 3, 4, 5, 6]

## 리스트 연결 연산자와 요소 추가의 차이
list_a = [1,2,3]
list_b = [4,5,6]
print(list_a +list_b ) #리스트 연결 연산자로 연결하였다.
print(list_a)
print(list_b)
# [1, 2, 3, 4, 5, 6]
# [1, 2, 3] <비파괴처리>
# [4, 5, 6]

list_a = [1,2,3]
list_b = [4,5,6]
list_a.extend(list_b) #리스트 연결 연산자로 연결하였다.
print(list_a)
print(list_b)

# [1, 2, 3, 4, 5, 6] <파괴적처리-앞에 입력했던 list 자체적에 직접적인 변화가 있다.>
# [4, 5, 6]

# 리스트와 같이 원본에 어떠한 영향도 주지 않는 것: 비파괴적
# 리스트에 직접적인 영향을 주는 함수 또는 연산: 파괴적

## 리스트에 요소 제거하기
# 인덱스로 제거하기: del, pop
# del 리스트명[인덱스] - 리스트의 특정 인덱스에 있는 요소를 제거한다.
# 리스트명.pop(인덱스) -  제거할 위치에 있는 요소를 제거한다. 매개변수를 입력하지 않으면 마지막 요소를 제거한다.

list_a = [0,1,2,3,4,5]
print("# 리스트의 요소 하나 제거하기")

# 제거 방법 [1] -del
del list_a[1]
print("del list_a[1]", list_a)

# 제거 방법[2] -pop
list_a.pop(2)
print("pop(2):", list_a)

# # 리스트의 요소 하나 제거하기
# del list_a[1] [0, 2, 3, 4, 5]
# pop(2): [0, 2, 4, 5]
